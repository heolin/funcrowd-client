
interface IFeedback {
  /**
   * It contains values generated by all FeedbackValueFields assigned to this feedback.
   * 
   * Example format of output: 
   * ```
   * {
   *   "output_field": {
   *     "ReferenceValue": "12"
   *   }
   * }
   * ```
   */
  values: Record<string, any>;

  /**
   * It contains values generated by all FeedbackScoreFields assigned to this feedback.
   * FeedbackValueFields are used to generate a feedback in a numeric form.
   * 
   * Example format of output: 
   * ```
   * {
   *   "output_field": {
   *     "ReferenceScore": 0.5
   *   }
   * }
   * ```
   * 
   */
  scores: Record<string, any>;
  /** Contains aggregated value for all scores from `scores` field */
  score: number;
  /** Used to determine what sort of feedback window should be used */
  type: string;
}

/**
 * Used to store feedback information generated for a given annotation.
 * Feedback object contains: values and scores:
 * - Scores are a numeric values that are assigned to fields in the Annotation using selected scoring algorithm. 
 * - Values are used to generate a feedback without any restriction for the format.
 *   For example they can be used to provide a feedback with a reference value prepared for selected Item.
 * 
 * Notice that feedback will be generated only for fields that have `feedback` field set to True in the ItemTemplateField.
 */
export default class Feedback implements IFeedback {
    constructor(public values: Record<string, any>, public scores: Record<string, any>,
                public score: number, public type: string) {}

    /**
     * Gets all feedback values for given field name.
     * 
     * @param field - name of a field
     * @returns a record object, where FeedbackValueField's name is a key, and value is an output generated by it
     */
    getValue(field: string): Record<string, any> {
        return this.values[field];
    }

    /**
     * Gets all feedback scores for given field name.

     * @param field - name of a field
     * @returns a record object, where FeedbackValueField's name is a key, and value is an output generated by it
     */
    getScore(field: string): Record<string, any> {
        return this.scores[field];
    }

    static fromJson(data: IFeedback) {
        let object = new Feedback(
            data.values,
            data.scores,
            data.score,
            data.type
        );
        return object;
    }
}
